// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./mod.d.ts" />
var r="function"==typeof Object.defineProperty?Object.defineProperty:null;var t=function(){try{return r({},"x",{}),!0}catch(r){return!1}},e=Object.defineProperty,n=Object.prototype,o=n.toString,i=n.__defineGetter__,a=n.__defineSetter__,u=n.__lookupGetter__,l=n.__lookupSetter__;var c=e,f=function(r,t,e){var c,f,p,v;if("object"!=typeof r||null===r||"[object Array]"===o.call(r))throw new TypeError("invalid argument. First argument must be an object. Value: `"+r+"`.");if("object"!=typeof e||null===e||"[object Array]"===o.call(e))throw new TypeError("invalid argument. Property descriptor must be an object. Value: `"+e+"`.");if((f="value"in e)&&(u.call(r,t)||l.call(r,t)?(c=r.__proto__,r.__proto__=n,delete r[t],r[t]=e.value,r.__proto__=c):r[t]=e.value),p="get"in e,v="set"in e,f&&(p||v))throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");return p&&i&&i.call(r,t,e.get),v&&a&&a.call(r,t,e.set),r},p=t()?c:f;var v=function(r,t,e){p(r,t,{configurable:!1,enumerable:!1,writable:!1,value:e})};var y=function(r){return"string"==typeof r};var b=function(){return"function"==typeof Symbol&&"symbol"==typeof Symbol("foo")}();var s=function(){return b&&"symbol"==typeof Symbol.toStringTag},_=Object.prototype.toString,m=_;var g=function(r){return m.call(r)},d=Object.prototype.hasOwnProperty;var j=function(r,t){return null!=r&&d.call(r,t)},w="function"==typeof Symbol?Symbol.toStringTag:"",S=j,h=w,O=_;var P=g,T=function(r){var t,e,n;if(null==r)return O.call(r);e=r[h],t=S(r,h);try{r[h]=void 0}catch(t){return O.call(r)}return n=O.call(r),t?r[h]=e:delete r[h],n},E=s()?T:P,V=String.prototype.valueOf;var C=E,k=function(r){try{return V.call(r),!0}catch(r){return!1}},x=s();var A=function(r){return"object"==typeof r&&(r instanceof String||(x?k(r):"[object String]"===C(r)))},G=y,M=A;var F=v,L=function(r){return G(r)||M(r)},U=A;F(L,"isPrimitive",y),F(L,"isObject",U);var q=L.isPrimitive;var z=L.isPrimitive;var B=function(r){if(!q(r))throw new TypeError("invalid argument. Must provide a primitive string. Value: `"+r+"`.");return r.toLowerCase()},D=function(r){if(!z(r))throw new TypeError("invalid argument. Must provide a primitive string. Value: `"+r+"`.");return r.toUpperCase()},H=L.isPrimitive;var I=function(r){var t;return!(!H(r)||""===r)&&((t=r[0])===D(t)&&t!==B(t))};export{I as default};
//# sourceMappingURL=mod.js.map
