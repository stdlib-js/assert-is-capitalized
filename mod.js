// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./mod.d.ts" />
var t="function"==typeof Object.defineProperty?Object.defineProperty:null;var r=Object.defineProperty,e=Object.prototype,n=e.toString,o=e.__defineGetter__,i=e.__defineSetter__,a=e.__lookupGetter__,l=e.__lookupSetter__;var u=function(){try{return t({},"x",{}),!0}catch(t){return!1}}()?r:function(t,r,u){var c,p,f,y;if("object"!=typeof t||null===t||"[object Array]"===n.call(t))throw new TypeError("invalid argument. First argument must be an object. Value: `"+t+"`.");if("object"!=typeof u||null===u||"[object Array]"===n.call(u))throw new TypeError("invalid argument. Property descriptor must be an object. Value: `"+u+"`.");if((p="value"in u)&&(a.call(t,r)||l.call(t,r)?(c=t.__proto__,t.__proto__=e,delete t[r],t[r]=u.value,t.__proto__=c):t[r]=u.value),f="get"in u,y="set"in u,p&&(f||y))throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");return f&&o&&o.call(t,r,u.get),y&&i&&i.call(t,r,u.set),t};function c(t,r,e){u(t,r,{configurable:!1,enumerable:!1,writable:!1,value:e})}function p(t){return"string"==typeof t}var f="function"==typeof Symbol&&"symbol"==typeof Symbol("foo");function y(){return f&&"symbol"==typeof Symbol.toStringTag}var b=Object.prototype.toString;var v=Object.prototype.hasOwnProperty;var _="function"==typeof Symbol?Symbol.toStringTag:"";var s=y()?function(t){var r,e,n,o,i;if(null==t)return b.call(t);e=t[_],i=_,r=null!=(o=t)&&v.call(o,i);try{t[_]=void 0}catch(r){return b.call(t)}return n=b.call(t),r?t[_]=e:delete t[_],n}:function(t){return b.call(t)},g=String.prototype.valueOf;var m=y();function d(t){return"object"==typeof t&&(t instanceof String||(m?function(t){try{return g.call(t),!0}catch(t){return!1}}(t):"[object String]"===s(t)))}function j(t){return p(t)||d(t)}function w(t){var r;return!(!p(t)||""===t)&&((r=t[0])===function(t){if(!p(t))throw new TypeError("invalid argument. Must provide a primitive string. Value: `"+t+"`.");return t.toUpperCase()}(r)&&r!==function(t){if(!p(t))throw new TypeError("invalid argument. Must provide a primitive string. Value: `"+t+"`.");return t.toLowerCase()}(r))}c(j,"isPrimitive",p),c(j,"isObject",d);export{w as default};
//# sourceMappingURL=mod.js.map
